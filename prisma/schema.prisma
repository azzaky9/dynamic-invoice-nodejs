generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OrderActivity {
  id        String   @id
  action_at DateTime @default(now())
  notes     String
  order_id  String
  order     order    @relation(fields: [order_id], references: [id])

  @@index([order_id], map: "OrderActivity_order_id_fkey")
}

model customer {
  id           String         @id
  name         String
  phone        String
  email        String?
  address      String
  order_person order_person[]
}

model invoice {
  id             String  @id
  invoice_number String  @unique
  order          order[]
}

model order {
  id              String           @id
  order_at        DateTime         @default(now())
  total_price     Int
  status          order_status
  address         String
  recipient_name  String
  recipient_phone String
  invoice_id      String?
  payment_method  String?
  packing_type    String?
  OrderActivity   OrderActivity[]
  invoice         invoice?         @relation(fields: [invoice_id], references: [id])
  order_person    order_person[]
  product_orders  product_orders[]

  @@index([invoice_id], map: "order_invoice_id_fkey")
}

model order_person {
  id          String   @id
  user_id     Int
  customer_id String
  order_id    String
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  order       order    @relation(fields: [order_id], references: [id])
  users       users    @relation(fields: [user_id], references: [id])

  @@index([customer_id], map: "order_person_customer_id_fkey")
  @@index([order_id], map: "order_person_order_id_fkey")
  @@index([user_id], map: "order_person_user_id_fkey")
}

model product_orders {
  id         Int      @id @default(autoincrement())
  quantity   Int
  price      Int
  product_id String
  order_id   String
  order      order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([order_id], map: "product_orders_order_id_fkey")
  @@index([product_id, order_id])
}

model products {
  id             String           @id
  name           String
  description    String
  price          Int
  created_at     DateTime         @default(now())
  updated_at     DateTime
  updated_by     String
  created_by     String
  stock_id       Int?             @unique
  weight         Int
  product_orders product_orders[]
  stocks         stocks?          @relation(fields: [stock_id], references: [id], onDelete: Cascade)
}

model stock_location {
  name   String   @id @unique
  stocks stocks[]
}

model stock_status {
  id       Int                 @id @default(autoincrement())
  status   stock_status_status
  stock_id Int                 @unique
  stocks   stocks              @relation(fields: [stock_id], references: [id], onDelete: Cascade)
}

model stocks {
  id             Int            @id @default(autoincrement())
  quantity       Int            @default(0)
  location_name  String
  is_pending     Boolean
  quantity_type  String
  products       products?
  stock_status   stock_status?
  stock_location stock_location @relation(fields: [location_name], references: [name], onDelete: Cascade)

  @@index([location_name], map: "stocks_location_name_fkey")
}

model users {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  username          String         @unique
  password          String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now())
  last_seen         DateTime?
  role              users_role
  original_password String
  order_person      order_person[]
}

model Payment {
  id         String   @id
  name       String   @db.VarChar(100)
  created_at DateTime @default(now())
}

enum stock_status_status {
  success
  delivered
  rejected
  pending
  problem
}

enum order_status {
  success
  delivered
  rejected
  pending
  problem
}

enum users_role {
  admin
  user
}
